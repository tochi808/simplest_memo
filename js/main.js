// Generated by CoffeeScript 1.4.0

$(function() {
  var AppView, InputView, Memo, MemoList, MemoListView, MemoView, Memos, Tag, TagList, TagListView, TagView, Tags, app;
  Memo = Backbone.Model.extend({
    localStorage: new Backbone.LocalStorage('memo'),
    defaults: {
      title: "no title"
    },
    initialize: function() {},
    validate: function(options) {
      if (options.body === "") {
        return "本文を入力してください。";
      }
    }
  });
  MemoList = Backbone.Collection.extend({
    model: Memo,
    localStorage: new Backbone.LocalStorage('memo')
  });
  Tag = Backbone.Model.extend({
    localStorage: new Backbone.LocalStorage('tag')
  });
  TagList = Backbone.Collection.extend({
    model: Tag,
    localStorage: new Backbone.LocalStorage('tag')
  });
  Memos = new MemoList();
  Tags = new TagList();
  MemoListView = Backbone.View.extend({
    tagName: 'li',
    template: _.template($('#memo-list-template').html()),
    events: {
      "click .memo-title": "showDetail",
      "click .icon-remove": "clear",
      "mouseover": function() {
        this.toggleIcons(true);
        return this.$el.addClass('label-warning');
      },
      "mouseleave": function() {
        this.toggleIcons(false);
        return this.$el.removeClass('label-warning');
      }
    },
    initialize: function(options) {
      this.app_view = options.app_view;
      return this.listenTo(this.model, 'destroy', this.remove);
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$('.icon-tag').popover({
        content: function() {
          return (new TagListView()).render().el;
        },
        html: true
      });
      return this;
    },
    showDetail: function(evt) {
      var memo_view;
      evt.stopPropagation();
      memo_view = new MemoView({
        model: this.model
      });
      return this.app_view.setDisp(memo_view.render().el);
    },
    toggleIcons: function(show) {
      if (show === true) {
        return this.$('.icons').show();
      } else {
        return this.$('.icons').hide();
      }
    },
    clear: function(evt) {
      evt.stopPropagation();
      return this.model.destroy();
    }
  });
  TagListView = Backbone.View.extend({
    tagName: 'ul',
    render: function() {
      Tags.each(this.addOne, this);
      return this;
    },
    addOne: function(tag) {
      var view;
      view = new TagView({
        model: tag
      });
      return this.$el.append(view.render().el);
    }
  });
  TagView = Backbone.View.extend({
    tagName: 'li',
    render: function() {
      this.$el.html(this.model.name);
      return this;
    }
  });
  MemoView = Backbone.View.extend({
    template: _.template($('#memo-template').html()),
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    }
  });
  InputView = Backbone.View.extend({
    el: $('#input-area'),
    events: {
      "click #toggle-input-panel": "toggleInputPanel",
      "click #save": "saveMemo",
      "keydown": "closePanel"
    },
    initialize: function() {
      this.button = $('#toggle-input-panel');
      this.input_panel = this.$('#input-panel');
      this.memo_title = this.$('#memo-title');
      this.memo_body = this.$('#memo-body');
      this.new_memo_button_template = (_.template(this.$("#toggle-input-panel").html()))();
      return this.close_input_button_template = (_.template($("#close-input-button").html()))();
    },
    panel_is_invisible: function() {
      return this.input_panel.css("display") === "none";
    },
    saveMemo: function() {
      var new_memo;
      new_memo = new Memo({
        title: this.memo_title.val(),
        body: this.memo_body.val()
      });
      new_memo.save();
      if (new_memo.validationError) {
        return this.renderError(new_memo.validationError);
      } else {
        Memos.add(new_memo, {
          wait: true
        });
        this.input_panel.slideUp();
        this.resetPanel();
        return this.button.html(this.new_memo_button_template);
      }
    },
    toggleInputPanel: function(e) {
      var _this = this;
      if (this.panel_is_invisible() === true) {
        this.input_panel.slideDown(function() {
          return _this.memo_title.focus();
        });
        return this.button.html(this.close_input_button_template);
      } else {
        this.button.html(this.new_memo_button_template);
        this.resetPanel();
        return this.input_panel.slideUp();
      }
    },
    renderError: function(message) {
      this.$('div.control-group').addClass('error');
      return this.$('span.help-inline').html(message);
    },
    resetPanel: function() {
      this.memo_title.val('');
      this.memo_body.val('');
      this.$('div.control-group').removeClass('error');
      return this.$('span.help-inline').html('');
    },
    closePanel: function(e) {
      var _this = this;
      if (e.keyCode !== 27) {
        return;
      }
      return this.input_panel.slideUp(function() {
        _this.button.html(_this.new_memo_button_template);
        _this.button.focus();
        return _this.resetPanel();
      });
    }
  });
  AppView = Backbone.View.extend({
    el: $('#app'),
    initialize: function() {
      this.disparea = this.$('#mem');
      this.input_area = new InputView({
        parentView: this
      });
      this.listenTo(Memos, 'add', this.addOneMemo);
      this.listenTo(Memos, 'reset', this.addAllMemo);
      Memos.fetch();
      return Tags.fetch();
    },
    addOneMemo: function(memo) {
      var list_view;
      list_view = new MemoListView({
        model: memo,
        app_view: this
      });
      return this.$('.memos ul').append(list_view.render().el);
    },
    addAllMemo: function() {
      return Memos.each(this.addOneMemo, this);
    },
    setDisp: function(v) {
      return this.disparea.html(v);
    }
  });
  return app = new AppView();
});
